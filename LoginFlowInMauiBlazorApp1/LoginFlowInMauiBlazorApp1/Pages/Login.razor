@page "/"
@using LoginFlowInMauiBlazorApp1.Models;
@using LoginFlowInMauiBlazorApp1.Services;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using Newtonsoft.Json;
@inject IAppService AppService;
@inject NavigationManager NavManager;
<h3>login</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email address</label>
        <input @bind-value="loginModel.UserName" class="form-control" placeholder="Digite o email" />
        <ValidationMessage For="@(()=> loginModel.UserName)" />
    </div>
    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" @bind-value="loginModel.Password" class="form-control" placeholder="Digite a senha" />
        <ValidationMessage For="@(()=> loginModel.Password)" />
    </div>
    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="registration">
            <span>Não possui conta? Registre-se</span>
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            SignIn
        </button>
    </div>
</EditForm>

@code {
    LoginModel loginModel = new();

    private string _spinnerClass = "";

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        var response = await AppService.AuthenticateUser(loginModel);

        if (response != null)
        {
            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadToken(response.Token) as JwtSecurityToken;

            string userId = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.NameId).Value;
            string name = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.UniqueName).Value;
            string email = loginModel.UserName;

            var userBasicDetail = new UserBasicDetail
                {
                    Email = email,
                    Name = name,
                    Token = response.Token,
                    UserId = userId
                };

            string userBasicInfoStr = JsonConvert.SerializeObject(userBasicDetail);

            await SecureStorage.SetAsync(nameof(Settings.UserBasicDetail), userBasicInfoStr);
            Settings.UserBasicDetail = userBasicDetail;

            NavManager.NavigateTo("/dashboard");

        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Nome de usuário ou senha estão incorretos", "Ok");
        }
        _spinnerClass = "";
    }
}
